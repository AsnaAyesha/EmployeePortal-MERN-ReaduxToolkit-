{"ast":null,"code":"import { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../../app/api/apiSlice\";\nconst employeeAdapter = createEntityAdapter({});\nconst initialState = employeeAdapter.getInitialState();\nexport const employeeApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    listEmployee: builder.query({\n      query: () => '/api/employee',\n      validateStatus: (response, result) => {\n        return response.status(200) && !result.isError;\n      },\n      transformResponse: responseData => {\n        const loadedEmployee = responseData.map(employee => {\n          employee.id = employee._id;\n          return employee;\n        });\n        return employeeAdapter.setAll(initialState, loadedEmployee);\n      },\n      providesTags: (result, err, args) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Employee',\n            id: 'List'\n          }, ...result.ids.map(id => ({\n            type: 'Employee',\n            id\n          }))];\n        } else {\n          return [{\n            type: 'Employee',\n            id: 'List'\n          }];\n        }\n      }\n    }),\n    // addEmployee: builder.mutation({\n    //     query: initialEmployeeData => ({\n    //         url: '/api/employee',\n    //         method: 'POST',\n    //         body:{\n    //             ...initialEmployeeData\n    //         }\n    //     }),\n    //     invalidatesTags: [\n    //         {type:'Employee' , id:'List'}\n    //     ]\n    // })\n    addEmployee: builder.mutation({\n      query: initialNoteData => ({\n        url: '/api/notes',\n        method: 'POST',\n        body: {\n          ...initialNoteData\n        }\n      }),\n      invalidatesTags: [{\n        type: 'Note',\n        id: 'LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useListEmployeeQuery,\n  useAddEmployeeMutation\n} = employeeApiSlice;\nexport const selectEmployeeResult = employeeApiSlice.endpoints.listEmployee.select();\nconst selectEmployeeData = createSelector(selectEmployeeResult, employeeResult => employeeResult.data);\nexport const {\n  selectAll: selectAllEmployee,\n  selectById: selectEmployeeById\n} = employeeAdapter.getSelectors(state => {\n  var _selectEmployeeData;\n  return (_selectEmployeeData = selectEmployeeData(state)) !== null && _selectEmployeeData !== void 0 ? _selectEmployeeData : initialState;\n});","map":{"version":3,"names":["createEntityAdapter","createSelector","apiSlice","employeeAdapter","initialState","getInitialState","employeeApiSlice","injectEndpoints","endpoints","builder","listEmployee","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedEmployee","map","employee","id","_id","setAll","providesTags","err","args","ids","type","addEmployee","mutation","initialNoteData","url","method","body","invalidatesTags","useListEmployeeQuery","useAddEmployeeMutation","selectEmployeeResult","select","selectEmployeeData","employeeResult","data","selectAll","selectAllEmployee","selectById","selectEmployeeById","getSelectors","state"],"sources":["F:/react class/project_employee/frontend1/src/features/employee/employeeApi/EmployeeApiSlice.jsx"],"sourcesContent":["import { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from \"../../../app/api/apiSlice\";\r\n\r\nconst employeeAdapter = createEntityAdapter({});\r\nconst initialState = employeeAdapter.getInitialState();\r\n\r\nexport const employeeApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder =>({\r\n        listEmployee: builder.query({\r\n            query: ()=>'/api/employee',\r\n            validateStatus:(response, result) => {\r\n                return response.status(200) && !result.isError;\r\n            },\r\n            transformResponse: responseData => {\r\n                const loadedEmployee = responseData.map(employee =>{\r\n                    employee.id = employee._id;\r\n                    return employee;\r\n                })\r\n                return employeeAdapter.setAll(initialState, loadedEmployee)\r\n            },\r\n            providesTags: (result, err, args) => {\r\n                if(result?.ids){\r\n                    return [\r\n                        {type: 'Employee', id:'List'},...result.ids.map(id => ({type:'Employee', id}))\r\n                    ]\r\n                }else{\r\n                    return [{type:'Employee' , id:'List'}]\r\n                }\r\n            }\r\n        }),\r\n\r\n        // addEmployee: builder.mutation({\r\n        //     query: initialEmployeeData => ({\r\n        //         url: '/api/employee',\r\n        //         method: 'POST',\r\n        //         body:{\r\n        //             ...initialEmployeeData\r\n        //         }\r\n        //     }),\r\n        //     invalidatesTags: [\r\n        //         {type:'Employee' , id:'List'}\r\n        //     ]\r\n        // })\r\n        addEmployee: builder.mutation({\r\n            query: initialNoteData => ({\r\n                url:'/api/notes',\r\n                method:'POST',\r\n                body: {\r\n                    ...initialNoteData\r\n                }\r\n            }),\r\n            invalidatesTags: [\r\n                { type: 'Note', id: 'LIST' }\r\n            ]            \r\n          }),\r\n    })\r\n});\r\n\r\nexport const {useListEmployeeQuery, useAddEmployeeMutation} = employeeApiSlice;\r\nexport const selectEmployeeResult = employeeApiSlice.endpoints.listEmployee.select()\r\n\r\nconst selectEmployeeData = createSelector(\r\n    selectEmployeeResult,\r\n    employeeResult => employeeResult.data\r\n)\r\n\r\nexport const {\r\n    selectAll : selectAllEmployee,\r\n    selectById : selectEmployeeById\r\n} = employeeAdapter.getSelectors(state => selectEmployeeData(state)?? initialState)"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,SAASC,QAAQ,QAAQ,2BAA2B;AAEpD,MAAMC,eAAe,GAAGH,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAC/C,MAAMI,YAAY,GAAGD,eAAe,CAACE,eAAe,EAAE;AAEtD,OAAO,MAAMC,gBAAgB,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACrDC,SAAS,EAAEC,OAAO,KAAI;IAClBC,YAAY,EAAED,OAAO,CAACE,KAAK,CAAC;MACxBA,KAAK,EAAE,MAAI,eAAe;MAC1BC,cAAc,EAAC,CAACC,QAAQ,EAAEC,MAAM,KAAK;QACjC,OAAOD,QAAQ,CAACE,MAAM,CAAC,GAAG,CAAC,IAAI,CAACD,MAAM,CAACE,OAAO;MAClD,CAAC;MACDC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,cAAc,GAAGD,YAAY,CAACE,GAAG,CAACC,QAAQ,IAAG;UAC/CA,QAAQ,CAACC,EAAE,GAAGD,QAAQ,CAACE,GAAG;UAC1B,OAAOF,QAAQ;QACnB,CAAC,CAAC;QACF,OAAOlB,eAAe,CAACqB,MAAM,CAACpB,YAAY,EAAEe,cAAc,CAAC;MAC/D,CAAC;MACDM,YAAY,EAAE,CAACX,MAAM,EAAEY,GAAG,EAAEC,IAAI,KAAK;QACjC,IAAGb,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEc,GAAG,EAAC;UACX,OAAO,CACH;YAACC,IAAI,EAAE,UAAU;YAAEP,EAAE,EAAC;UAAM,CAAC,EAAC,GAAGR,MAAM,CAACc,GAAG,CAACR,GAAG,CAACE,EAAE,KAAK;YAACO,IAAI,EAAC,UAAU;YAAEP;UAAE,CAAC,CAAC,CAAC,CACjF;QACL,CAAC,MAAI;UACD,OAAO,CAAC;YAACO,IAAI,EAAC,UAAU;YAAGP,EAAE,EAAC;UAAM,CAAC,CAAC;QAC1C;MACJ;IACJ,CAAC,CAAC;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAQ,WAAW,EAAErB,OAAO,CAACsB,QAAQ,CAAC;MAC1BpB,KAAK,EAAEqB,eAAe,KAAK;QACvBC,GAAG,EAAC,YAAY;QAChBC,MAAM,EAAC,MAAM;QACbC,IAAI,EAAE;UACF,GAAGH;QACP;MACJ,CAAC,CAAC;MACFI,eAAe,EAAE,CACb;QAAEP,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAE;MAAO,CAAC;IAElC,CAAC;EACP,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAACe,oBAAoB;EAAEC;AAAsB,CAAC,GAAGhC,gBAAgB;AAC9E,OAAO,MAAMiC,oBAAoB,GAAGjC,gBAAgB,CAACE,SAAS,CAACE,YAAY,CAAC8B,MAAM,EAAE;AAEpF,MAAMC,kBAAkB,GAAGxC,cAAc,CACrCsC,oBAAoB,EACpBG,cAAc,IAAIA,cAAc,CAACC,IAAI,CACxC;AAED,OAAO,MAAM;EACTC,SAAS,EAAGC,iBAAiB;EAC7BC,UAAU,EAAGC;AACjB,CAAC,GAAG5C,eAAe,CAAC6C,YAAY,CAACC,KAAK;EAAA;EAAA,8BAAIR,kBAAkB,CAACQ,KAAK,CAAC,qEAAG7C,YAAY;AAAA,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}