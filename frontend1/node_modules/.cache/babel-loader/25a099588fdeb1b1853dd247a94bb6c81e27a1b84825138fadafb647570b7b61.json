{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  employees: []\n};\nconst EmployeeSlice = createSlice({\n  name: 'employee',\n  initialState,\n  reducers: {\n    addEmployee: (state, action) => {\n      console.log(action.payload);\n      state.employees = [...action.payload];\n      //  state.employees.push(...action.payload);\n      // state.push(action.payload);\n    },\n\n    deleteEmployee: (state, action) => {\n      // console.log(action.payload);\n      const {\n        _id\n      } = action.payload;\n      const existingEmployee = state.employees.findIn(employee => employee._id === _id);\n      console.log(existingEmployee);\n      de;\n      if (existingEmployee) {\n        console.log(state.employees.filter(employee => employee._id !== _id));\n        return state.employees.filter(employee => employee._id !== _id);\n      }\n      //state.employees = state.employees.filter((employee) => employee.id !== action.payload.id)\n    },\n\n    updateEmployee: (state, action) => {\n      const {\n        id,\n        name,\n        username,\n        email,\n        phone\n      } = [...action.payload];\n      const existingEmployee = state.employees.find(employee => employee.id === id);\n      if (existingEmployee) {\n        existingEmployee.name = name;\n        existingEmployee.username = username;\n        existingEmployee.email = email;\n        existingEmployee.phone = phone;\n      }\n      // state.employees = state.employees.map((employee)=>  employee.id === action.payload ? action.payload : employee)\n    }\n  }\n});\n\nexport const {\n  addEmployee,\n  deleteEmployee,\n  updateEmployee\n} = EmployeeSlice.actions;\nexport default EmployeeSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","employees","EmployeeSlice","name","reducers","addEmployee","state","action","console","log","payload","deleteEmployee","_id","existingEmployee","findIn","employee","de","filter","updateEmployee","id","username","email","phone","find","actions","reducer"],"sources":["F:/react class/project_employee/frontend1/src/features/employee/EmployeeSlice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = { employees:[]}\r\nconst EmployeeSlice = createSlice({\r\n    name: 'employee',\r\n    initialState,\r\n    reducers: {\r\n      addEmployee: (state, action) => {\r\n        console.log(action.payload)\r\n        state.employees = [...action.payload]\r\n      //  state.employees.push(...action.payload);\r\n       // state.push(action.payload);\r\n      },\r\n      deleteEmployee: (state, action) => {\r\n       // console.log(action.payload);\r\n         const {_id} = action.payload\r\n          \r\n         const  existingEmployee = state.employees.findIn(employee => employee._id === _id)\r\n         console.log(existingEmployee);de\r\n         if(existingEmployee){\r\n          console.log(state.employees.filter(employee=> employee._id !== _id));\r\n           return state.employees.filter(employee=> employee._id !== _id)\r\n         }\r\n        //state.employees = state.employees.filter((employee) => employee.id !== action.payload.id)\r\n      },\r\n      updateEmployee:(state, action) =>{\r\n           const {id, name, username,email,phone} = [...action.payload]\r\n           const existingEmployee = state.employees.find(employee => employee.id === id)\r\n           if(existingEmployee){\r\n             existingEmployee.name = name;\r\n             existingEmployee.username = username;\r\n             existingEmployee.email = email;\r\n             existingEmployee.phone = phone;\r\n          }\r\n         // state.employees = state.employees.map((employee)=>  employee.id === action.payload ? action.payload : employee)\r\n      }\r\n }\r\n})\r\n\r\nexport const {addEmployee, deleteEmployee, updateEmployee}  = EmployeeSlice.actions;\r\nexport default EmployeeSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAE5C,MAAMC,YAAY,GAAG;EAAEC,SAAS,EAAC;AAAE,CAAC;AACpC,MAAMC,aAAa,GAAGH,WAAW,CAAC;EAC9BI,IAAI,EAAE,UAAU;EAChBH,YAAY;EACZI,QAAQ,EAAE;IACRC,WAAW,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9BC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAAC;MAC3BJ,KAAK,CAACL,SAAS,GAAG,CAAC,GAAGM,MAAM,CAACG,OAAO,CAAC;MACvC;MACC;IACD,CAAC;;IACDC,cAAc,EAAE,CAACL,KAAK,EAAEC,MAAM,KAAK;MAClC;MACE,MAAM;QAACK;MAAG,CAAC,GAAGL,MAAM,CAACG,OAAO;MAE5B,MAAOG,gBAAgB,GAAGP,KAAK,CAACL,SAAS,CAACa,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACH,GAAG,KAAKA,GAAG,CAAC;MAClFJ,OAAO,CAACC,GAAG,CAACI,gBAAgB,CAAC;MAACG,EAAE;MAChC,IAAGH,gBAAgB,EAAC;QACnBL,OAAO,CAACC,GAAG,CAACH,KAAK,CAACL,SAAS,CAACgB,MAAM,CAACF,QAAQ,IAAGA,QAAQ,CAACH,GAAG,KAAKA,GAAG,CAAC,CAAC;QACnE,OAAON,KAAK,CAACL,SAAS,CAACgB,MAAM,CAACF,QAAQ,IAAGA,QAAQ,CAACH,GAAG,KAAKA,GAAG,CAAC;MAChE;MACD;IACF,CAAC;;IACDM,cAAc,EAAC,CAACZ,KAAK,EAAEC,MAAM,KAAI;MAC5B,MAAM;QAACY,EAAE;QAAEhB,IAAI;QAAEiB,QAAQ;QAACC,KAAK;QAACC;MAAK,CAAC,GAAG,CAAC,GAAGf,MAAM,CAACG,OAAO,CAAC;MAC5D,MAAMG,gBAAgB,GAAGP,KAAK,CAACL,SAAS,CAACsB,IAAI,CAACR,QAAQ,IAAIA,QAAQ,CAACI,EAAE,KAAKA,EAAE,CAAC;MAC7E,IAAGN,gBAAgB,EAAC;QAClBA,gBAAgB,CAACV,IAAI,GAAGA,IAAI;QAC5BU,gBAAgB,CAACO,QAAQ,GAAGA,QAAQ;QACpCP,gBAAgB,CAACQ,KAAK,GAAGA,KAAK;QAC9BR,gBAAgB,CAACS,KAAK,GAAGA,KAAK;MACjC;MACD;IACH;EACL;AACD,CAAC,CAAC;;AAEF,OAAO,MAAM;EAACjB,WAAW;EAAEM,cAAc;EAAEO;AAAc,CAAC,GAAIhB,aAAa,CAACsB,OAAO;AACnF,eAAetB,aAAa,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}